Elm.Engine = Elm.Engine || {};
Elm.Engine.Render = Elm.Engine.Render || {};
Elm.Engine.Render.Render = Elm.Engine.Render.Render || {};
Elm.Engine.Render.Render.make = function (_elm) {
   "use strict";
   _elm.Engine = _elm.Engine || {};
   _elm.Engine.Render = _elm.Engine.Render || {};
   _elm.Engine.Render.Render = _elm.Engine.Render.Render || {};
   if (_elm.Engine.Render.Render.values)
   return _elm.Engine.Render.Render.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Engine.Render.Render",
   $Basics = Elm.Basics.make(_elm),
   $Engine$Render$Renderable = Elm.Engine.Render.Renderable.make(_elm),
   $Engine$Scene$Scene = Elm.Engine.Scene.Scene.make(_elm),
   $Engine$Shader$Shader = Elm.Engine.Shader.Shader.make(_elm),
   $Engine$Shader$Uniform = Elm.Engine.Shader.Uniform.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $WebGL = Elm.WebGL.make(_elm);
   var renderObject = F2(function (scene,
   object) {
      return A4($WebGL.entity,
      $Engine$Shader$Shader.constructVertexShader(object.material.vertexShader),
      $Engine$Shader$Shader.constructFragmentShader(object.material.fragmentShader),
      object.mesh,
      A2($Engine$Shader$Uniform.constructUniform,
      scene,
      object));
   });
   var render = function (scene) {
      return $WebGL.webgl({ctor: "_Tuple2"
                          ,_0: $Basics.floor(scene.viewport.dimensions.width)
                          ,_1: $Basics.floor(scene.viewport.dimensions.height)})(A2($List.map,
      renderObject(scene),
      scene.objects));
   };
   _elm.Engine.Render.Render.values = {_op: _op
                                      ,renderObject: renderObject
                                      ,render: render};
   return _elm.Engine.Render.Render.values;
};