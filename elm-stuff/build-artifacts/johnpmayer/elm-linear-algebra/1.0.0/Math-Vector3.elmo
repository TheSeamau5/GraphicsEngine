Elm.Math = Elm.Math || {};
Elm.Math.Vector3 = Elm.Math.Vector3 || {};
Elm.Math.Vector3.make = function (_elm) {
   "use strict";
   _elm.Math = _elm.Math || {};
   _elm.Math.Vector3 = _elm.Math.Vector3 || {};
   if (_elm.Math.Vector3.values)
   return _elm.Math.Vector3.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Math.Vector3",
   $Native$MJS = Elm.Native.MJS.make(_elm);
   var cross = $Native$MJS.v3cross;
   var dot = $Native$MJS.v3dot;
   var scale = $Native$MJS.v3scale;
   var normalize = $Native$MJS.v3normalize;
   var distanceSquared = $Native$MJS.v3distanceSquared;
   var distance = $Native$MJS.v3distance;
   var lengthSquared = $Native$MJS.v3lengthSquared;
   var length = $Native$MJS.v3length;
   var direction = $Native$MJS.v3direction;
   var negate = $Native$MJS.v3neg;
   var sub = $Native$MJS.v3sub;
   var add = $Native$MJS.v3add;
   var fromRecord = $Native$MJS.fromRecord3;
   var fromTuple = $Native$MJS.fromTuple3;
   var toRecord = $Native$MJS.toRecord3;
   var toTuple = $Native$MJS.toTuple3;
   var setZ = $Native$MJS.v3setZ;
   var setY = $Native$MJS.v3setY;
   var setX = $Native$MJS.v3setX;
   var getZ = $Native$MJS.v3getZ;
   var getY = $Native$MJS.v3getY;
   var getX = $Native$MJS.v3getX;
   var k = A3($Native$MJS.vec3,
   0,
   0,
   1);
   var j = A3($Native$MJS.vec3,
   0,
   1,
   0);
   var i = A3($Native$MJS.vec3,
   1,
   0,
   0);
   var vec3 = $Native$MJS.vec3;
   var Vec3 = {ctor: "Vec3"};
   _elm.Math.Vector3.values = {_op: _op
                              ,Vec3: Vec3
                              ,vec3: vec3
                              ,i: i
                              ,j: j
                              ,k: k
                              ,getX: getX
                              ,getY: getY
                              ,getZ: getZ
                              ,setX: setX
                              ,setY: setY
                              ,setZ: setZ
                              ,toTuple: toTuple
                              ,toRecord: toRecord
                              ,fromTuple: fromTuple
                              ,fromRecord: fromRecord
                              ,add: add
                              ,sub: sub
                              ,negate: negate
                              ,direction: direction
                              ,length: length
                              ,lengthSquared: lengthSquared
                              ,distance: distance
                              ,distanceSquared: distanceSquared
                              ,normalize: normalize
                              ,scale: scale
                              ,dot: dot
                              ,cross: cross};
   return _elm.Math.Vector3.values;
};