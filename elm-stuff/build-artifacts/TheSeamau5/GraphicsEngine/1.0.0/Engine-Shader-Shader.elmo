Elm.Engine = Elm.Engine || {};
Elm.Engine.Shader = Elm.Engine.Shader || {};
Elm.Engine.Shader.Shader = Elm.Engine.Shader.Shader || {};
Elm.Engine.Shader.Shader.make = function (_elm) {
   "use strict";
   _elm.Engine = _elm.Engine || {};
   _elm.Engine.Shader = _elm.Engine.Shader || {};
   _elm.Engine.Shader.Shader = _elm.Engine.Shader.Shader || {};
   if (_elm.Engine.Shader.Shader.values)
   return _elm.Engine.Shader.Shader.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Engine.Shader.Shader",
   $Basics = Elm.Basics.make(_elm),
   $Engine$Shader$Attribute = Elm.Engine.Shader.Attribute.make(_elm),
   $Engine$Shader$Boilerplate = Elm.Engine.Shader.Boilerplate.make(_elm),
   $Engine$Shader$Uniform = Elm.Engine.Shader.Uniform.make(_elm),
   $Engine$Shader$Utils = Elm.Engine.Shader.Utils.make(_elm),
   $WebGL = Elm.WebGL.make(_elm);
   var showFragmentShader = function (shaderString) {
      return A2($Basics._op["++"],
      $Engine$Shader$Boilerplate.fragmentShaderBoilerplate,
      A2($Basics._op["++"],
      $Engine$Shader$Utils.newLine,
      shaderString));
   };
   var constructFragmentShader = function ($) {
      return $WebGL.unsafeShader(showFragmentShader($));
   };
   var showVertexShader = function (shaderString) {
      return A2($Basics._op["++"],
      $Engine$Shader$Boilerplate.vertexShaderBoilerplate,
      A2($Basics._op["++"],
      $Engine$Shader$Utils.newLine,
      shaderString));
   };
   var constructVertexShader = function ($) {
      return $WebGL.unsafeShader(showVertexShader($));
   };
   _elm.Engine.Shader.Shader.values = {_op: _op
                                      ,showVertexShader: showVertexShader
                                      ,showFragmentShader: showFragmentShader
                                      ,constructVertexShader: constructVertexShader
                                      ,constructFragmentShader: constructFragmentShader};
   return _elm.Engine.Shader.Shader.values;
};