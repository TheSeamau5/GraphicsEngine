Elm.Engine = Elm.Engine || {};
Elm.Engine.Shader = Elm.Engine.Shader || {};
Elm.Engine.Shader.Boilerplate = Elm.Engine.Shader.Boilerplate || {};
Elm.Engine.Shader.Boilerplate.make = function (_elm) {
   "use strict";
   _elm.Engine = _elm.Engine || {};
   _elm.Engine.Shader = _elm.Engine.Shader || {};
   _elm.Engine.Shader.Boilerplate = _elm.Engine.Shader.Boilerplate || {};
   if (_elm.Engine.Shader.Boilerplate.values)
   return _elm.Engine.Shader.Boilerplate.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Engine.Shader.Boilerplate",
   $Basics = Elm.Basics.make(_elm),
   $Engine$Shader$Library = Elm.Engine.Shader.Library.make(_elm),
   $Engine$Shader$Utils = Elm.Engine.Shader.Utils.make(_elm),
   $List = Elm.List.make(_elm);
   var attributeDeclarations = $Engine$Shader$Utils.groupStatements(A2($List.map,
   $Basics.uncurry($Engine$Shader$Utils.declareAttribute),
   _L.fromArray([{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "position"}])));
   var uniformDeclarations = $Engine$Shader$Utils.groupStatements(A2($List.map,
   $Basics.uncurry($Engine$Shader$Utils.declareUniform),
   _L.fromArray([{ctor: "_Tuple2"
                 ,_0: "mat4"
                 ,_1: "modelMatrix"}
                ,{ctor: "_Tuple2"
                 ,_0: "mat4"
                 ,_1: "viewMatrix"}
                ,{ctor: "_Tuple2"
                 ,_0: "mat4"
                 ,_1: "projectionMatrix"}
                ,{ctor: "_Tuple2"
                 ,_0: "mat4"
                 ,_1: "modelViewMatrix"}
                ,{ctor: "_Tuple2"
                 ,_0: "mat4"
                 ,_1: "modelViewProjectionMatrix"}
                ,{ctor: "_Tuple2"
                 ,_0: "mat4"
                 ,_1: "normalMatrix"}
                ,{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "lightPosition"}
                ,{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "lightRotation"}
                ,{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "lightColor"}
                ,{ctor: "_Tuple2"
                 ,_0: "float"
                 ,_1: "lightIntensity"}
                ,{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "materialEmissiveColor"}
                ,{ctor: "_Tuple2"
                 ,_0: "float"
                 ,_1: "materialEmissiveStrength"}
                ,{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "materialAmbientColor"}
                ,{ctor: "_Tuple2"
                 ,_0: "float"
                 ,_1: "materialAmbientStrength"}
                ,{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "materialDiffuseColor"}
                ,{ctor: "_Tuple2"
                 ,_0: "float"
                 ,_1: "materialDiffuseStrength"}
                ,{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "materialSpecularColor"}
                ,{ctor: "_Tuple2"
                 ,_0: "float"
                 ,_1: "materialSpecularStrength"}])));
   var setupLight = function () {
      var lightValue = A2($Engine$Shader$Utils.callFunctionExpression,
      "Light",
      _L.fromArray(["lightPosition"
                   ,"lightRotation"
                   ,"lightColor"
                   ,"lightIntensity"]));
      return A3($Engine$Shader$Utils.declareInitializedVariable,
      "Light",
      "light",
      lightValue);
   }();
   var lightStructTypeDefinition = A2($Engine$Shader$Utils.declareStructType,
   "Light",
   _L.fromArray([{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "position"}
                ,{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "rotation"}
                ,{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "color"}
                ,{ctor: "_Tuple2"
                 ,_0: "float"
                 ,_1: "intensity"}]));
   var setupMaterial = function () {
      var makeMaterialColor = $Engine$Shader$Utils.callFunctionExpression("MaterialProperty");
      var materialValue = $Engine$Shader$Utils.callFunctionExpression("Material")(A2($List.map,
      makeMaterialColor,
      _L.fromArray([_L.fromArray(["materialEmissiveColor"
                                 ,"materialEmissiveStrength"])
                   ,_L.fromArray(["materialAmbientColor"
                                 ,"materialAmbientStrength"])
                   ,_L.fromArray(["materialDiffuseColor"
                                 ,"materialDiffuseStrength"])
                   ,_L.fromArray(["materialSpecularColor"
                                 ,"materialSpecularStrength"])])));
      return A3($Engine$Shader$Utils.declareInitializedVariable,
      "Material",
      "material",
      materialValue);
   }();
   var materialStructTypeDefinition = A2($Engine$Shader$Utils.declareStructType,
   "Material",
   _L.fromArray([{ctor: "_Tuple2"
                 ,_0: "MaterialProperty"
                 ,_1: "emissive"}
                ,{ctor: "_Tuple2"
                 ,_0: "MaterialProperty"
                 ,_1: "ambient"}
                ,{ctor: "_Tuple2"
                 ,_0: "MaterialProperty"
                 ,_1: "diffuse"}
                ,{ctor: "_Tuple2"
                 ,_0: "MaterialProperty"
                 ,_1: "specular"}]));
   var materialPropertyStructTypeDefinition = A2($Engine$Shader$Utils.declareStructType,
   "MaterialProperty",
   _L.fromArray([{ctor: "_Tuple2"
                 ,_0: "vec3"
                 ,_1: "color"}
                ,{ctor: "_Tuple2"
                 ,_0: "float"
                 ,_1: "strength"}]));
   var commonShaderBoilerplate = A2($Basics._op["++"],
   materialPropertyStructTypeDefinition,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   materialStructTypeDefinition,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   lightStructTypeDefinition,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   uniformDeclarations,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   setupLight,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   setupMaterial,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Library.libraryVariables,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   $Engine$Shader$Library.libraryFunctions)))))))))))))))))))));
   var vertexShaderBoilerplate = A2($Basics._op["++"],
   $Engine$Shader$Utils.setFloatPrecision,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   attributeDeclarations,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   commonShaderBoilerplate))))));
   var fragmentShaderBoilerplate = A2($Basics._op["++"],
   $Engine$Shader$Utils.setFloatPrecision,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   A2($Basics._op["++"],
   $Engine$Shader$Utils.newLine,
   commonShaderBoilerplate)));
   _elm.Engine.Shader.Boilerplate.values = {_op: _op
                                           ,materialPropertyStructTypeDefinition: materialPropertyStructTypeDefinition
                                           ,materialStructTypeDefinition: materialStructTypeDefinition
                                           ,setupMaterial: setupMaterial
                                           ,lightStructTypeDefinition: lightStructTypeDefinition
                                           ,setupLight: setupLight
                                           ,uniformDeclarations: uniformDeclarations
                                           ,attributeDeclarations: attributeDeclarations
                                           ,commonShaderBoilerplate: commonShaderBoilerplate
                                           ,vertexShaderBoilerplate: vertexShaderBoilerplate
                                           ,fragmentShaderBoilerplate: fragmentShaderBoilerplate};
   return _elm.Engine.Shader.Boilerplate.values;
};