Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Main",
   $Engine = Elm.Engine.make(_elm),
   $Engine$Material$Material = Elm.Engine.Material.Material.make(_elm),
   $Engine$Shader$GouraudShader = Elm.Engine.Shader.GouraudShader.make(_elm),
   $Math$Vector3 = Elm.Math.Vector3.make(_elm);
   var myLight = _U.replace([["position"
                             ,A3($Math$Vector3.vec3,
                             -3,
                             5,
                             -4)]],
   $Engine.light);
   var myCamera = _U.replace([["position"
                              ,A3($Math$Vector3.vec3,
                              -1.7,
                              1.7,
                              -3)]
                             ,["rotation"
                              ,A3($Math$Vector3.vec3,
                              0.4,
                              0.5,
                              0)]],
   $Engine.camera);
   var myObject = function () {
      var gouraudMaterial = _U.replace([["fragmentShader"
                                        ,$Engine$Shader$GouraudShader.gouraudShader]
                                       ,["emissive"
                                        ,A2($Engine$Material$Material.MaterialProperty,
                                        A3($Math$Vector3.vec3,0,0,1),
                                        0.7)]
                                       ,["ambient"
                                        ,A2($Engine$Material$Material.MaterialProperty,
                                        A3($Math$Vector3.vec3,1,1,1),
                                        0.3)]
                                       ,["diffuse"
                                        ,A2($Engine$Material$Material.MaterialProperty,
                                        A3($Math$Vector3.vec3,1,1,1),
                                        0.5)]
                                       ,["specular"
                                        ,A2($Engine$Material$Material.MaterialProperty,
                                        A3($Math$Vector3.vec3,1,1,1),
                                        0.8)]],
      $Engine.material);
      return _U.replace([["material"
                         ,gouraudMaterial]],
      $Engine.sphere);
   }();
   var myScene = _U.replace([["objects"
                             ,_L.fromArray([myObject])]
                            ,["camera",myCamera]
                            ,["light",myLight]],
   $Engine.scene);
   var main = $Engine.render(myScene);
   _elm.Main.values = {_op: _op
                      ,myObject: myObject
                      ,myCamera: myCamera
                      ,myLight: myLight
                      ,myScene: myScene
                      ,main: main};
   return _elm.Main.values;
};