Elm.Engine = Elm.Engine || {};
Elm.Engine.Mesh = Elm.Engine.Mesh || {};
Elm.Engine.Mesh.Sphere = Elm.Engine.Mesh.Sphere || {};
Elm.Engine.Mesh.Sphere.make = function (_elm) {
   "use strict";
   _elm.Engine = _elm.Engine || {};
   _elm.Engine.Mesh = _elm.Engine.Mesh || {};
   _elm.Engine.Mesh.Sphere = _elm.Engine.Mesh.Sphere || {};
   if (_elm.Engine.Mesh.Sphere.values)
   return _elm.Engine.Mesh.Sphere.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Engine.Mesh.Sphere",
   $Basics = Elm.Basics.make(_elm),
   $Engine$Mesh$Mesh = Elm.Engine.Mesh.Mesh.make(_elm),
   $Engine$Mesh$Triangle = Elm.Engine.Mesh.Triangle.make(_elm),
   $Engine$Render$Renderable = Elm.Engine.Render.Renderable.make(_elm),
   $List = Elm.List.make(_elm),
   $Math$Vector3 = Elm.Math.Vector3.make(_elm);
   var sphereMesh = F4(function (center,
   radius,
   segmentsR,
   segmentsY) {
      return function () {
         var halfRadius = radius / 2;
         var getRadius = function (y) {
            return $Basics.sqrt(A2($Basics.max,
            0,
            halfRadius - y * y));
         };
         var dy = 1 / segmentsY;
         var dt = 2 * $Basics.pi / segmentsR;
         return $List.concatMap(function (i) {
            return function () {
               var theta = i * dt;
               var x0 = $Basics.cos(theta);
               var x1 = $Basics.cos(theta + dt);
               var z0 = $Basics.sin(theta);
               var z1 = $Basics.sin(theta + dt);
               return $List.concatMap(function (j) {
                  return function () {
                     var y0 = j * dy - radius;
                     var y1 = y0 + dy;
                     var r1 = getRadius(y1);
                     var tl = A2($Math$Vector3.add,
                     center,
                     A3($Math$Vector3.vec3,
                     x0 * r1,
                     y1,
                     z0 * r1));
                     var tr = A2($Math$Vector3.add,
                     center,
                     A3($Math$Vector3.vec3,
                     x1 * r1,
                     y1,
                     z1 * r1));
                     var r0 = getRadius(y0);
                     var bl = A2($Math$Vector3.add,
                     center,
                     A3($Math$Vector3.vec3,
                     x0 * r0,
                     y0,
                     z0 * r0));
                     var br = A2($Math$Vector3.add,
                     center,
                     A3($Math$Vector3.vec3,
                     x1 * r0,
                     y0,
                     z1 * r0));
                     return A2($Basics._op["++"],
                     A3($Engine$Mesh$Triangle.triangleMesh,
                     bl,
                     br,
                     tr),
                     A3($Engine$Mesh$Triangle.triangleMesh,
                     bl,
                     tr,
                     tl));
                  }();
               })(_L.range(0,segmentsY - 1));
            }();
         })(_L.range(0,segmentsR - 1));
      }();
   });
   var sphere = _U.replace([["mesh"
                            ,A4(sphereMesh,
                            A3($Math$Vector3.vec3,0,0,0),
                            0.5,
                            20,
                            20)]],
   $Engine$Mesh$Triangle.triangle);
   _elm.Engine.Mesh.Sphere.values = {_op: _op
                                    ,sphereMesh: sphereMesh
                                    ,sphere: sphere};
   return _elm.Engine.Mesh.Sphere.values;
};